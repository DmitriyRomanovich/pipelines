trigger: none

resources:
  pipelines:
  - pipeline: build_pipeline_gatewayapi # Name of the pipeline resource.
    source: "Gateway Api CI" # The name of the pipeline referenced by this pipeline resource.
    project: Samsung # Required only if the source pipeline is in another project
  - pipeline: build_pipeline_integrationportalapi # Name of the pipeline resource.
    source: "Integration Portal API" # The name of the pipeline referenced by this pipeline resource.
    project: Samsung # Required only if the source pipeline is in another project
  - pipeline: build_pipeline_integrationportalui # Name of the pipeline resource.
    source: "Integration Portal UI" # The name of the pipeline referenced by this pipeline resource.
    project: Samsung # Required only if the source pipeline is in another project
  - pipeline: build_pipeline_notificationapi # Name of the pipeline resource.
    source: "Notification API CI" # The name of the pipeline referenced by this pipeline resource.
    project: Samsung # Required only if the source pipeline is in another project
  - pipeline: build_pipeline_renderingapi # Name of the pipeline resource.
    source: "Rendering API CI" # The name of the pipeline referenced by this pipeline resource.
    project: Samsung # Required only if the source pipeline is in another project
  - pipeline: build_pipeline_schedulingapi # Name of the pipeline resource.
    source: "Scheduling API CI" # The name of the pipeline referenced by this pipeline resource.
    project: Samsung # Required only if the source pipeline is in another project
  repositories:
  - repository: helm
    type: git
    name: Samsung/helms
    trigger: none
    ref: refs/heads/main

variables:
  customer: 'smsng'
  environment: 'uat'
  region: 'aue'
  namespace: 'uat-comms'
  serviceConnectionName: 'Azure subscription 1(65de260e-4df4-4b57-9aa6-726e772d3246)'
  kubernetesClusterResourceGroup: "rg-dev-aue-smsng"
  kubernetesClusterName: "dev-aue-smsng"
  chartPath: "helms/helms/comms"

name: deploy-comms-UAT-aue-smsng-$(date:yyyyMMdd)-buildID-$(Build.BuildId)

pool:
  name: GlowDevPool

stages:  
- stage: Deploy_release
  jobs:  
  - job: Deploy 
    steps:
    - checkout: self
    # - checkout: release
    - checkout: helm

    - task: AzureKeyVault@2
      displayName: 'Export Azure Key Vault secrets from kv-$(environment)-$(region)-$(customer)'
      inputs:
        azureSubscription: $(serviceConnectionName)
        KeyVaultName: kv-$(environment)-$(region)-$(customer)
        RunAsPreJob: true

    - task: AzureCLI@2
      displayName: 'Set commitHash'
      inputs:
        azureSubscription: $(serviceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd helms
          commitHash=$(git rev-parse --short HEAD)
          echo "##vso[task.setvariable variable=commitHash]$commitHash"
          echo "$commitHash"

    - task: KubectlInstaller@0
      displayName: 'Install Kubectl 1.27.3'
      inputs: 
        kubectlVersion: 1.27.3 

    - task: HelmInstaller@1
      displayName: 'Install Helm 3.10.0'
      inputs:
        helmVersionToInstall: 3.10.0
        
    # - template: templates/ps.set_images.yml
    #   parameters:
    #     customer: "$(customer)"
    #     environment: "$(environment)"
    #     region: "$(region)"
    #     namespace: "$(namespace)"

    - template: ../templates/task.map_kv_helm.yml
      parameters:
        serviceConnectionName: "$(serviceConnectionName)"

    # gatewayapi
    - template: ../templates/application.yml
      parameters:
        serviceName: "gatewayapi"
        imageRepository: "$(imageRepository)/gatewayapi"
        imageTag: "$(resources.pipeline.build_pipeline_gatewayapi.runName)"
        chartPath: "$(chartPath)"
        serviceConnectionName: "$(serviceConnectionName)"
        kubernetesClusterResourceGroup: "$(kubernetesClusterResourceGroup)"
        kubernetesClusterName: "$(kubernetesClusterName)"
        namespace: "$(namespace)"
        commitHash: "$(commitHash)"
        TempVars: "$(TempVars)"

    # integrationportalapi
    - template: ../templates/application.yml
      parameters:
        serviceName: "integrationportalapi"
        imageRepository: "$(imageRepository)/integrationportalapi"
        imageTag: "$(resources.pipeline.build_pipeline_integrationportalapi.runName)"
        chartPath: "$(chartPath)"
        serviceConnectionName: "$(serviceConnectionName)"
        kubernetesClusterResourceGroup: "$(kubernetesClusterResourceGroup)"
        kubernetesClusterName: "$(kubernetesClusterName)"
        namespace: "$(namespace)"
        commitHash: "$(commitHash)"
        TempVars: "$(TempVars)"

    # integrationportalui
    - template: ../templates/application.yml
      parameters:
        serviceName: "integrationportalui"
        imageRepository: "$(imageRepository)/integrationportalui"
        imageTag: "$(resources.pipeline.build_pipeline_integrationportalui.runName)"
        chartPath: "$(chartPath)"
        serviceConnectionName: "$(serviceConnectionName)"
        kubernetesClusterResourceGroup: "$(kubernetesClusterResourceGroup)"
        kubernetesClusterName: "$(kubernetesClusterName)"
        namespace: "$(namespace)"
        commitHash: "$(commitHash)"
        TempVars: "$(TempVars)"

    # notificationapi
    - template: ../templates/application.yml
      parameters:
        serviceName: "notificationapi"
        imageRepository: "$(imageRepository)/notificationapi"
        imageTag: "$(resources.pipeline.build_pipeline_notificationapi.runName)"
        chartPath: "$(chartPath)"
        serviceConnectionName: "$(serviceConnectionName)"
        kubernetesClusterResourceGroup: "$(kubernetesClusterResourceGroup)"
        kubernetesClusterName: "$(kubernetesClusterName)"
        namespace: "$(namespace)"
        commitHash: "$(commitHash)"
        TempVars: "$(TempVars)"

    # renderingapi
    - template: ../templates/application.yml
      parameters:
        serviceName: "renderingapi"
        imageRepository: "$(imageRepository)/renderingapi"
        imageTag: "$(resources.pipeline.build_pipeline_renderingapi.runName)"
        chartPath: "$(chartPath)"
        serviceConnectionName: "$(serviceConnectionName)"
        kubernetesClusterResourceGroup: "$(kubernetesClusterResourceGroup)"
        kubernetesClusterName: "$(kubernetesClusterName)"
        namespace: "$(namespace)"
        commitHash: "$(commitHash)"
        TempVars: "$(TempVars)"

    # schedulingapi
    - template: ../templates/application.yml
      parameters:
        serviceName: "schedulingapi"
        imageRepository: "$(imageRepository)/schedulingapi"
        imageTag: "$(resources.pipeline.build_pipeline_schedulingapi.runName)"
        chartPath: "$(chartPath)"
        serviceConnectionName: "$(serviceConnectionName)"
        kubernetesClusterResourceGroup: "$(kubernetesClusterResourceGroup)"
        kubernetesClusterName: "$(kubernetesClusterName)"
        namespace: "$(namespace)"
        commitHash: "$(commitHash)"
        TempVars: "$(TempVars)"